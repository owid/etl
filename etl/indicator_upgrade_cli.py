"""CLI commands for indicator upgrading workflow."""

import json
from pathlib import Path

import rich_click as click
from structlog import get_logger

from etl.db import get_connection
from etl.files import get_schema_from_url
from etl.grapher.io import get_all_datasets, get_variables_in_dataset
from etl.indicator_upgrade.indicator_update import find_charts_from_variable_ids, update_chart_config
from etl.match_variables import get_dataset_id

# Logger
log = get_logger()


@click.group(name="indicator-upgrade")
def cli():
    """Commands for upgrading chart indicators when datasets are updated."""
    pass


@cli.command()
@click.option(
    "--mapping-file",
    type=click.Path(exists=True, path_type=Path),
    required=True,
    help="Path to JSON file containing variable ID mappings (from etl variable-match).",
)
@click.option(
    "--dry-run",
    is_flag=True,
    default=False,
    help="Preview changes without applying them to the database.",
)
@click.option(
    "--output-file",
    type=click.Path(path_type=Path),
    help="Save updated chart configurations to JSON file (useful with --dry-run).",
)
def apply(mapping_file: Path, dry_run: bool, output_file: Path | None) -> None:
    """Apply variable mappings to update chart configurations.

    Takes a mapping file (generated by 'etl variable-match') and updates all
    charts that use the old variables to reference the new variables instead.
    """
    # Load mapping file
    log.info(f"Loading variable mappings from {mapping_file}")
    with open(mapping_file) as f:
        mapping_data = json.load(f)

    # Convert to dict format expected by chart updater
    indicator_mapping = {}
    num_mappings = 0

    for item in mapping_data:
        old_id = item.get("id_old")
        new_id = item.get("id_new")

        if old_id and new_id:
            indicator_mapping[int(old_id)] = int(new_id)
            num_mappings += 1

    if not indicator_mapping:
        log.error("No valid mappings found in file")
        return

    log.info(f"Found {num_mappings} variable mappings")

    # Find affected charts
    log.info("Finding charts that use the old variables...")
    old_variable_ids = set(indicator_mapping.keys())
    charts = find_charts_from_variable_ids(old_variable_ids)

    if not charts:
        log.info("No charts found using the old variables")
        return

    log.info(f"Found {len(charts)} charts to update")

    # Get chart schema for validation
    log.info("Loading chart schema for validation...")
    try:
        schema_url = "https://files.ourworldindata.org/schemas/grapher-schema.004.json"
        schema = get_schema_from_url(schema_url)
    except Exception as e:
        log.warning(f"Failed to load chart schema: {e}. Proceeding without validation.")
        schema = {}

    # Update chart configurations
    updated_charts = []
    errors = []

    for chart in charts:
        try:
            log.info(f"Updating chart {chart.id}: {chart.config.get('title', 'Untitled')}")

            # Update the chart config
            new_config = update_chart_config(config=chart.config, indicator_mapping=indicator_mapping, schema=schema)

            # Store updated chart info
            updated_charts.append(
                {
                    "chart_id": chart.id,
                    "title": chart.config.get("title", "Untitled"),
                    "old_config": chart.config,
                    "new_config": new_config,
                    "chart_object": chart,
                }
            )

        except Exception as e:
            error_msg = f"Failed to update chart {chart.id}: {str(e)}"
            log.error(error_msg)
            errors.append(error_msg)

    # Display summary
    log.info(f"Successfully updated {len(updated_charts)} charts")
    if errors:
        log.warning(f"Failed to update {len(errors)} charts:")
        for error in errors[:5]:  # Show first 5 errors
            log.warning(f"  {error}")
        if len(errors) > 5:
            log.warning(f"  ... and {len(errors) - 5} more errors")

    # Save output if requested
    if output_file:
        output_data = []
        for chart_info in updated_charts:
            output_data.append(
                {"chart_id": chart_info["chart_id"], "title": chart_info["title"], "config": chart_info["new_config"]}
            )

        with open(output_file, "w") as f:
            json.dump(output_data, f, indent=2)
        log.info(f"Saved updated chart configurations to {output_file}")

    # Apply changes to database (unless dry run)
    if dry_run:
        log.info("DRY RUN: Changes preview completed. Use without --dry-run to apply changes.")
    else:
        log.info("Applying changes to database...")

        # Note: AdminAPI would be used for more advanced chart operations if needed

        success_count = 0
        for chart_info in updated_charts:
            try:
                chart = chart_info["chart_object"]
                chart.config = chart_info["new_config"]

                # Update in database
                with get_connection() as db_conn:
                    chart.upsert(db_conn)

                success_count += 1

            except Exception as e:
                log.error(f"Failed to save chart {chart_info['chart_id']} to database: {e}")

        log.info(f"Successfully applied changes to {success_count} charts in the database")


@cli.command()
@click.option("--new-dataset-id", type=int, help="ID of the new dataset to find potential old datasets for.")
@click.option("--new-dataset-name", type=str, help="Name of the new dataset to find potential old datasets for.")
@click.option("--limit", type=int, default=10, help="Maximum number of candidate datasets to return. Default: 10")
def suggest_datasets(new_dataset_id: int | None, new_dataset_name: str | None, limit: int) -> None:
    """Suggest candidate old datasets that might need upgrading to a new dataset.

    Uses fuzzy matching on dataset names to find likely candidates for upgrading.
    """
    if not new_dataset_id and not new_dataset_name:
        raise click.ClickException("Must provide either --new-dataset-id or --new-dataset-name")

    with get_connection() as db_conn:
        # Get the target dataset info
        if new_dataset_id:
            # Get dataset name from ID
            datasets_df = get_all_datasets(archived=True, db_conn=db_conn)
            target_dataset = datasets_df[datasets_df.id == new_dataset_id]
            if target_dataset.empty:
                raise click.ClickException(f"Dataset with ID {new_dataset_id} not found")
            new_dataset_name = target_dataset.iloc[0]["name"]
        else:
            # Get dataset ID from name
            new_dataset_id = get_dataset_id(db_conn=db_conn, dataset_name=new_dataset_name or "")

        log.info(f"Finding candidate old datasets for: {new_dataset_name} (ID: {new_dataset_id})")

        # Get all datasets
        all_datasets = get_all_datasets(archived=True, db_conn=db_conn)

        # Filter out the target dataset itself
        candidates = all_datasets[all_datasets.id != new_dataset_id].copy()

        # Calculate fuzzy similarity scores
        from rapidfuzz import fuzz

        candidates["similarity"] = candidates["name"].apply(lambda x: fuzz.partial_ratio(new_dataset_name or "", x))

        # Sort by similarity and take top candidates
        top_candidates = candidates.nlargest(limit, "similarity")

        print(f"\nTop {limit} candidate datasets for upgrade:")
        print("=" * 80)

        for _, row in top_candidates.iterrows():
            print(f"ID: {row['id']:>6} | Similarity: {row['similarity']:>3.0f}% | {row['name']}")

            # Show if dataset has variables used in charts
            try:
                variables = get_variables_in_dataset(db_conn=db_conn, dataset_id=row["id"], only_used_in_charts=True)
                chart_vars = len(variables)
                if chart_vars > 0:
                    print(f"              | 📊 {chart_vars} variables used in charts")
                else:
                    print("              | ⚪ No variables used in charts")
            except Exception:
                print("              | ❓ Could not check chart usage")
            print()


if __name__ == "__main__":
    cli()
