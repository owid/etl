"""Display news from ETL."""

from datetime import datetime

import streamlit as st

from apps.wizard.utils.db import DB_IS_SET_UP, WizardDB
from etl.config import ENV_IS_REMOTE

# Page config
st.set_page_config(page_title="Wizard: News", page_icon="ü™Ñ")
st.title(":material/newspaper: News")
st.markdown("Find news and updates from the [etl project](https://github.com/owid/etl).")

# Only run this on live!
if (not DB_IS_SET_UP) | (not ENV_IS_REMOTE):
    st.warning(
        "This page is not available! Remember:\n\n- This page only works on live\n- You need to configure files `.streamlit/secrets.toml` and `.wizardcfg/wizard.db` correctly setup!"
    )
    st.stop()

# GPT
MODEL_NAME = "gpt-4o"
# Map window types
WINDOW_TYPES = {
    "7d": "Last 7 days",
    "1d": "Last 24 hours",
    # "1m": "Last 30 days",
}

# Session state config
st.session_state.window_type = st.session_state.get("window_type", "7d")


@st.cache_data()
def load_pr(num_days: int):
    """Check and load news."""
    # Load latest PR data
    data = WizardDB.get_pr(num_days=num_days)
    data = data.sort_values("DATE_MERGED", ascending=False)
    data = data[data["MERGED"] == 1]
    return data


def _clean_date(dt_raw: str, with_time: bool = False) -> str:
    """Show date nicely."""
    if with_time:
        return datetime.strptime(dt_raw, "%Y-%m-%dT%XZ").strftime("%a %d %b, %H:%M:%S UTC, %Y")
    return datetime.strptime(dt_raw, "%Y-%m-%dT%XZ").strftime("%a %d %b, %Y")


def render_expander(record):
    """Render expander for each PR."""
    with st.expander(f"{record['TITLE']} `by @{record['USERNAME']}`", expanded=False):
        # st.markdown(
        #     f"[See PR]({record['URL_HTML']})",
        # )
        st.markdown(f"[Go to Pull Request]({record['URL_HTML']})  |  [See diff]({record['URL_DIFF']})")
        if record["DESCRIPTION"]:
            st.markdown(record["DESCRIPTION"])


with st.sidebar:
    st.selectbox(
        "News period",
        options=list(WINDOW_TYPES.keys()),
        format_func=lambda x: WINDOW_TYPES.get(x),
        key="window_type",
    )

# Get records
if st.session_state.window_type == "7d":
    df_pr = load_pr(num_days=7)
elif st.session_state.window_type == "1d":
    df_pr = load_pr(num_days=1)
else:
    raise ValueError("Invalid window type")
records = df_pr.to_dict(orient="records")

# Header
st.header("Pull requests")
with st.popover("‚ÑπÔ∏è How this works"):
    st.markdown(
        "Everyday, we pull the latest pull requests from the etl repository and ask Chat GPT to summarise the main updates and interesting points from the pull requests. This information is stored in a small sqlite database so that we can display it here. Only merged pull requests are considered."
    )
# Display retrieved info in tabs
tab_1, tab_2 = st.tabs(["Summary", "Complete list"])
window_suffix = f":grey[({WINDOW_TYPES.get(st.session_state.window_type)})]"
with tab_1:
    # Summary
    st.subheader(f"Summary {window_suffix}")
    # with st.popover("Config"):
    with st.spinner(show_time=True):
        result = WizardDB.get_news_summary(window_type=st.session_state.window_type)
        if result:
            summary, dt, cost = result
            st.markdown(summary)
            st.info(
                f"This summary was generated by Chat GPT on {_clean_date(dt, with_time=True)} and had a cost of ${cost}."
            )

with tab_2:
    # Show last 7 day PR timeline
    st.subheader(f"List {window_suffix}")
    LAST_DATE_HEADER = None
    for record in records:
        date_str = _clean_date(record["DATE_MERGED"])
        if (LAST_DATE_HEADER is None) or (LAST_DATE_HEADER != date_str):
            st.markdown(f"#### {date_str}")
            LAST_DATE_HEADER = date_str
        render_expander(record)
