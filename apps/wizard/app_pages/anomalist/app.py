from typing import Optional, Tuple

import streamlit as st

from apps.wizard.app_pages.anomalist.utils import get_datasets_and_mapping_inputs
from apps.wizard.utils import cached, set_states
from apps.wizard.utils.components import grapher_chart, st_horizontal, st_tag
from apps.wizard.utils.db import WizardDB

# PAGE CONFIG
st.set_page_config(
    page_title="Wizard: Anomalist",
    page_icon="ðŸª„",
    layout="wide",
)
# OTHER CONFIG
ANOMALY_TYPES = {
    "time_change": {
        "tag_name": "Time change",
        "color": "orange",
        "icon": ":material/timeline",
    },
    "version_change": {
        "tag_name": "Version change",
        "color": "blue",
        "icon": ":material/upgrade",
    },
    "missing_point": {
        "tag_name": "Missing point",
        "color": "red",
        "icon": ":material/hide_source",
    },
    "ai": {
        "tag_name": "AI",
        "color": "rainbow",
        "icon": ":material/lightbulb",
    },
}
ANOMALY_TYPE_NAMES = [a["tag_name"] for a in ANOMALY_TYPES.values()]

#
# SESSION STATE
st.session_state.datasets_selected = st.session_state.get("datasets_selected", [])
st.session_state.indicators = st.session_state.get("indicators", {})

st.session_state.anomalist_filter_entities = st.session_state.get("anomalist_filter_entities", [])
st.session_state.anomalist_filter_indicators = st.session_state.get("anomalist_filter_indicators", [])

st.session_state.anomalist_datasets_submitted = st.session_state.get("anomalist_datasets_submitted", False)


# DEBUGGING
ENTITIES = [
    "Afghanistan",
    "Albania",
    "Algeria",
]
YEAR_MIN = 1950
YEAR_MAX = 2021
ANOMALIES = [
    {
        "title": "Coal consumption - Malaysia - 1983",
        "description": "There are 12 missing points that used to be informed in the previous version",
        "category": "missing_point",
        "country": "Malaysia",
        "year": 1983,
    },
    {
        "title": "Gas production - Ireland - 2000",
        "description": "There are 2 abrupt changes in the time series.",
        "category": "time_change",
        "country": "Ireland",
        "year": 2000,
    },
    {
        "title": "Nuclear production - France - 2010",
        "description": "There is 1 abrupt changes in the time series.",
        "category": "ai",
        "country": "France",
        "year": 2010,
    },
]
ANOMALIES = ANOMALIES + ANOMALIES + ANOMALIES + ANOMALIES
DATASETS_DEBUG = ["grapher/energy/2024-06-20/energy_mix"]  # 6590


# FUNCTIONS
# SHOW ANOMALIES
def show_anomaly(anomaly, indicator_id):
    with st.container(border=True):
        col1, col2 = st.columns(2)
        with col1:
            st_tag(**ANOMALY_TYPES[anomaly["category"]])
            st.markdown(f"##### {anomaly['title']}")
            st.markdown(f"{anomaly['description']}")
        with col2:
            # st.write(indicator.id)
            grapher_chart(variable_id=indicator_id, selected_entities=[anomaly["country"]])


def anomaly_detection(
    anomaly_types: Optional[Tuple[str, ...]] = None,
    dataset_ids: Optional[list[int]] = None,
    variable_mapping: Optional[str] = None,  # type: ignore
    variable_ids: Optional[list[int]] = None,
    dry_run: bool = False,
    reset_db: bool = False,
):
    return True


# Load the main inputs:
# * List of all grapher datasets.
# * List of newly created grapher datasets (the ones we most likely want to inspect).
# * The variable mapping generated by indicator upgrader, if there was any.
DATASETS_ALL, DATASETS_NEW, VARIABLE_MAPPING = get_datasets_and_mapping_inputs()

# 1/ PAGE TITLE
st.title(":material/planner_review: Anomalist")


# 2/ DATASET SEARCH
st.markdown(
    """
    <style>
       .stMultiSelect [data-baseweb=select] span{
            max-width: 1000px;
        }
    </style>""",
    unsafe_allow_html=True,
)

with st.form(key="dataset_search"):
    st.session_state.datasets_selected = st.multiselect(
        "Select datasets",
        # options=cached.load_dataset_uris(),
        options=DATASETS_ALL.keys(),
        # max_selections=1,
        default=DATASETS_NEW.keys(),
        format_func=DATASETS_ALL.get,
    )

    st.form_submit_button(
        "Load and scan data",
        type="primary",
        help="This will load the indicators from the selected datasets and scan for anomalies. This can take some time.",
        on_click=lambda: set_states({"anomalist_datasets_submitted": True}),
    )


# 3/ SCAN FOR ANOMALIES (if user submitts datasets)
if st.session_state.anomalist_datasets_submitted:
    st.toast("Loading datasets and scanning for anomalies...")

    # Load indicators in selected datasets
    st.session_state.indicators = cached.load_variables_display_in_dataset(
        dataset_id=st.session_state.datasets_selected,
        only_slug=True,
    )

    # Get variable mapping, if exists
    mapping = WizardDB.get_variable_mapping()

    # Scan for anomalies
    variable_ids = list(st.session_state.indicators.keys())
    anomaly_detection(variable_ids=variable_ids)
    # st.write(st.session_state.datasets_selected)


# 4/ GET ANOMALIES
# Show anomalies if any are found in database
anomalies = WizardDB.load_anomalies(st.session_state.datasets_selected)
if len(anomalies) > 0:
    # 4.1/ FILTER PARAMS
    with st.container(border=True):
        st.markdown("##### Select filters")

        # If there is a dataset selected, load the indicators
        if len(st.session_state.datasets_selected) > 0:
            # Load anomalies
            st.session_state.indicators = cached.load_variables_display_in_dataset(
                dataset_id=st.session_state.datasets_selected,
                only_slug=True,
            )

        col1, col2 = st.columns([10, 4])
        # Indicator
        with col1:
            st.session_state.anomalist_filter_indicators = st.multiselect(
                label="Indicators",
                options=st.session_state.indicators,
                format_func=st.session_state.indicators.get,
                help="Show anomalies affecting only a selection of indicators.",
                placeholder="Select indicators",
            )

        with col2:
            # Entity
            st.session_state.anomalist_filter_entities = st.multiselect(
                label="Entities",
                options=ENTITIES,
                help="Show anomalies affecting only a selection of entities.",
                placeholder="Select entities",
            )

        # Anomaly type
        with st_horizontal():
            st.multiselect(
                label="Sort by",
                options=[
                    "Anomaly score",
                    "Population",
                    "Chart views",
                ],
            )

            st.multiselect(
                label="Anomaly type",
                options=ANOMALY_TYPE_NAMES,
            )

            st.number_input(
                "Min year",
                min_value=YEAR_MIN,
                max_value=YEAR_MAX,
                step=1,
            )
            st.number_input(
                "Max year",
                min_value=YEAR_MIN,
                max_value=YEAR_MAX,
                step=1,
            )

        # st.multiselect("Anomaly type", min_value=0.0, max_value=1.0, value=0.5, step=0.01)
        # st.number_input("Minimum score", min_value=0.0, max_value=1.0, value=0.5, step=0.01)

    # SHOW ANOMALIES
    # If any indicator is given, show the anomalies
    indicators = list(st.session_state.indicators.keys())
    if len(indicators) > 0:
        for index, anomaly in enumerate(ANOMALIES):
            # Pic random indicator
            indicator_id = indicators[index * 3]
            show_anomaly(ANOMALIES[index], indicator_id)

set_states({"anomalist_datasets_submitted": False})
